version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: concert_travel_db
    environment:
      POSTGRES_DB: concert_travel
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: concert_travel_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build: ./backend
    container_name: concert_travel_backend
    environment:
      NODE_ENV: development
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: concert_travel
      DB_USER: postgres
      DB_PASSWORD: password
      REDIS_URL: redis://redis:6379
      PORT: 5001
      JWT_SECRET: Gh35WT34$&!arkGN5687
      # Add your API keys here
      # SPOTIFY_CLIENT_ID: your_spotify_client_id
      # SPOTIFY_CLIENT_SECRET: your_spotify_client_secret
      # AMADEUS_CLIENT_ID: your_amadeus_client_id
      # AMADEUS_CLIENT_SECRET: your_amadeus_client_secret
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (optional - for full stack development)
  frontend:
    build: ./frontend
    container_name: concert_travel_frontend
    environment:
      REACT_APP_API_URL: http://localhost:5001/api
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  redis_data: 